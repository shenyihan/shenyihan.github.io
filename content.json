{"meta":{"title":"个人主页","subtitle":"Life doesn’t get easier，you just get stronger","description":"Life doesn’t get easier，you just get stronger","author":"杨向成","url":"https://shenyihan.github.io"},"pages":[{"title":"categories","date":"2017-12-29T04:39:02.000Z","updated":"2017-12-29T04:39:53.729Z","comments":false,"path":"categories/index.html","permalink":"https://shenyihan.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2017-12-29T04:39:32.176Z","updated":"2017-12-29T04:39:32.176Z","comments":false,"path":"tags/index.html","permalink":"https://shenyihan.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"mycat学习使用","slug":"mycat学习使用","date":"2018-03-02T07:17:44.000Z","updated":"2018-03-29T06:25:46.525Z","comments":true,"path":"2018/03/02/mycat学习使用/","link":"","permalink":"https://shenyihan.github.io/2018/03/02/mycat学习使用/","excerpt":"","text":"安装 Mycat官网：http://www.mycat.io/可以了解下Mycat的背景和应用情况，这样使用起来比较有信心。 Mycat下载地址：http://dl.mycat.io/官网有个文档，属于详细的介绍，初次入门，看起来比较花时间。 下载：建议大家选择 1.6-RELEASE 版本，毕竟是比较稳定的版本。 安装：根据不同的系统选择不同的版本。包括linux、windows、mac,作者考虑还是非常周全的，当然，也有源码版的。（ps:源码版的下载后，只要配置正确，就可以正常运行调试，这个赞一下。） Mycat的安装其实只要解压下载的目录就可以了，非常简单。安装完成后，目录如下： 目录 说明bin mycat命令，启动、重启、停止等catlet catlet为Mycat的一个扩展功能conf Mycat 配置信息,重点关注lib Mycat引用的jar包，Mycat是java开发的logs 日志文件，包括Mycat启动的日志和运行的日志。配置 Mycat的配置文件都在conf目录里面，这里介绍几个常用的文件： 文件 说明server.xml Mycat的配置文件，设置账号、参数等schema.xml Mycat对应的物理数据库和数据库表的配置rule.xml Mycat分片（分库分表）规则Mycat的架构其实很好理解，Mycat是代理，Mycat后面就是物理数据库。和Web服务器的Nginx类似。对于使用者来说，访问的都是Mycat，不会接触到后端的数据库。我们现在做一个主从、读写分离，简单分表的示例。结构如下图： 服务器 IP 说明Mycat 192.168.0.2 mycat服务器，连接数据库时，连接此服务器database1 192.168.0.3 物理数据库1，真正存储数据的数据库database2 192.168.0.4 物理数据库2，真正存储数据的数据库Mycat作为主数据库中间件，肯定是与代码弱关联的，所以代码是不用修改的，使用Mycat后，连接数据库是不变的，默认端口是8066。连接方式和普通数据库一样，如：jdbc:mysql://192.168.0.2:8066/ server.xml 示例 test lunch false &lt;!-- 表级 DML 权限设置 --&gt; &lt;!-- &lt;privileges check=&quot;false&quot;&gt; &lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt; &lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt; &lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt; &lt;/schema&gt; &lt;/privileges&gt; --&gt; &lt;/user&gt; 重点关注下面这段，其他默认即可。 参数 说明user 用户配置节点–name 登录的用户名，也就是连接Mycat的用户名–password 登录的密码，也就是连接Mycat的密码–schemas 数据库名，这里会和schema.xml中的配置关联，多个用逗号分开，例如需要这个用户需要管理两个数据库db1,db2，则配置db1,dbs–privileges 配置用户针对表的增删改查的权限，具体见文档吧我这里配置了一个账号test 密码也是test,针对数据库lunch,读写权限都有，没有针对表做任何特殊的权限。 schema.xmlschema.xml是最主要的配置项，首先看我的配置文件。 &lt;?xml version=”1.0”?&gt;&lt;!DOCTYPE mycat:schema SYSTEM “schema.dtd”&gt; &lt;schema name=&quot;lunch&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot;&gt; &lt;table name=&quot;lunchmenu&quot; dataNode=&quot;dn1&quot; /&gt; &lt;table name=&quot;restaurant&quot; dataNode=&quot;dn1&quot; /&gt; &lt;table name=&quot;userlunch&quot; dataNode=&quot;dn1&quot; /&gt; &lt;table name=&quot;users&quot; dataNode=&quot;dn1&quot; /&gt; &lt;table name=&quot;dictionary&quot; primaryKey=&quot;id&quot; autoIncrement=&quot;true&quot; dataNode=&quot;dn1,dn2&quot; rule=&quot;mod-long&quot; /&gt; &lt;/schema&gt; &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;test1&quot; database=&quot;lunch&quot; /&gt; &lt;dataNode name=&quot;dn2&quot; dataHost=&quot;test2&quot; database=&quot;lunch&quot; /&gt; &lt;dataHost name=&quot;test1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&gt; &lt;heartbeat&gt;select user();&lt;/heartbeat&gt; &lt;writeHost host=&quot;hostM1&quot; url=&quot;192.168.0.2:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt; &lt;/writeHost&gt; &lt;/dataHost&gt; &lt;dataHost name=&quot;test2&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&gt; &lt;heartbeat&gt;select user();&lt;/heartbeat&gt; &lt;writeHost host=&quot;hostS1&quot; url=&quot;192.168.0.3:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt; &lt;/writeHost&gt; &lt;/dataHost&gt; 参数 说明schema 数据库设置，此数据库为逻辑数据库，name与server.xml中schema对应dataNode 分片信息，也就是分库相关配置dataHost 物理数据库，真正存储数据的数据库每个节点的属性逐一说明： schema: 属性 说明name 逻辑数据库名，与server.xml中的schema对应checkSQLschema 数据库前缀相关设置，建议看文档，这里暂时设为folsesqlMaxLimit select 时默认的limit，避免查询全表table: 属性 说明name 表名，物理数据库中表名dataNode 表存储到哪些节点，多个节点用逗号分隔。节点为下文dataNode设置的nameprimaryKey 主键字段名，自动生成主键时需要设置autoIncrement 是否自增rule 分片规则名，具体规则下文rule详细介绍dataNode 属性 说明name 节点名，与table中dataNode对应datahost 物理数据库名，与datahost中name对应database 物理数据库中数据库名dataHost 属性 说明name 物理数据库名，与dataNode中dataHost对应balance 均衡负载的方式writeType 写入方式dbType 数据库类型heartbeat 心跳检测语句，注意语句结尾的分号要加。应用场景 数据库分表分库 配置如下： &lt;?xml version=”1.0”?&gt;&lt;!DOCTYPE mycat:schema SYSTEM “schema.dtd”&gt; &lt;schema name=&quot;lunch&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot;&gt; &lt;table name=&quot;lunchmenu&quot; dataNode=&quot;dn1&quot; /&gt; &lt;table name=&quot;restaurant&quot; dataNode=&quot;dn1&quot; /&gt; &lt;table name=&quot;userlunch&quot; dataNode=&quot;dn1&quot; /&gt; &lt;table name=&quot;users&quot; dataNode=&quot;dn1&quot; /&gt; &lt;table name=&quot;dictionary&quot; primaryKey=&quot;id&quot; autoIncrement=&quot;true&quot; dataNode=&quot;dn1,dn2&quot; rule=&quot;mod-long&quot; /&gt; &lt;/schema&gt; &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;test1&quot; database=&quot;lunch&quot; /&gt; &lt;dataNode name=&quot;dn2&quot; dataHost=&quot;test2&quot; database=&quot;lunch&quot; /&gt; &lt;dataHost name=&quot;test1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&gt; &lt;heartbeat&gt;select user();&lt;/heartbeat&gt; &lt;writeHost host=&quot;hostM1&quot; url=&quot;192.168.0.2:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt; &lt;/writeHost&gt; &lt;/dataHost&gt; &lt;dataHost name=&quot;test2&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&gt; &lt;heartbeat&gt;select user();&lt;/heartbeat&gt; &lt;writeHost host=&quot;hostS1&quot; url=&quot;192.168.0.3:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt; &lt;/writeHost&gt; &lt;/dataHost&gt; 我在192.168.0.2、192.168.0.3均有数据库lunch。lunchmenu、restaurant、userlunch、users这些表都只写入节点dn1，也就是192.168.0.2这个服务，而dictionary写入了dn1、dn2两个节点，也就是192.168.0.2、192.168.0.3这两台服务器。分片的规则为：mod-long。主要关注rule属性，rule属性的内容来源于rule.xml这个文件，Mycat支持10种分表分库的规则，基本能满足你所需要的要求，这个必须赞一个，其他数据库中间件好像都没有这么多。table中的rule属性对应的就是rule.xml文件中tableRule的name,具体有哪些分表和分库的实现，建议还是看下文档。我这里选择的mod-long就是将数据平均拆分。因为我后端是两台物理库，所以rule.xml中mod-long对应的function count为2，见下面部分代码： id mod-long 2 数据库读写分离 配置如下： &lt;?xml version=”1.0”?&gt;&lt;!DOCTYPE mycat:schema SYSTEM “schema.dtd”&gt; &lt;schema name=&quot;lunch&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot;&gt; &lt;table name=&quot;lunchmenu&quot; dataNode=&quot;dn1&quot; /&gt; &lt;table name=&quot;restaurant&quot; dataNode=&quot;dn1&quot; /&gt; &lt;table name=&quot;userlunch&quot; dataNode=&quot;dn1&quot; /&gt; &lt;table name=&quot;users&quot; dataNode=&quot;dn1&quot; /&gt; &lt;table name=&quot;dictionary&quot; primaryKey=&quot;id&quot; autoIncrement=&quot;true&quot; dataNode=&quot;dn1&quot; /&gt; &lt;/schema&gt; &lt;dataNode name=&quot;dn1&quot; dataHost=&quot;test1&quot; database=&quot;lunch&quot; /&gt; &lt;dataHost name=&quot;test1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&gt; &lt;heartbeat&gt;select user();&lt;/heartbeat&gt; &lt;writeHost host=&quot;hostM1&quot; url=&quot;192.168.0.2:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt; &lt;readHost host=&quot;hostM1&quot; url=&quot;192.168.0.3:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt; &lt;/readHost&gt; &lt;/writeHost&gt; &lt;/dataHost&gt; 这样的配置与前一个示例配置改动如下：删除了table分配的规则,以及datanode只有一个datahost也只有一台，但是writehost总添加了readhost,balance改为1，表示读写分离。以上配置达到的效果就是102.168.0.2为主库，192.168.0.3为从库。 注意：Mycat主从分离只是在读的时候做了处理，写入数据的时候，只会写入到writehost，需要通过mycat的主从复制将数据复制到readhost，这个问题当时候我纠结了好久，数据写入writehost后，readhost一直没有数据，以为是自己配置的问题，后面才发现Mycat就没有实现主从复制的功能，毕竟数据库本身自带的这个功能才是最高效稳定的。 至于其他的场景，如同时主从和分表分库也是支持的了，只要了解这个实现以后再去修改配置，都是可以实现的。而热备及故障专业官方推荐使用haproxy配合一起使用，大家可以试试。使用 Mycat的启动也很简单，启动命令在Bin目录： ##启动mycat start ##停止mycat stop ##重启mycat restart如果在启动时发现异常，在logs目录中查看日志。 wrapper.log 为程序启动的日志，启动时的问题看这个mycat.log 为脚本执行时的日志，SQL脚本执行报错后的具体错误内容,查看这个文件。mycat.log是最新的错误日志，历史日志会根据时间生成目录保存。mycat启动后，执行命令不成功，可能实际上配置有错误，导致后面的命令没有很好的执行。 Mycat带来的最大好处就是使用是完全不用修改原有代码的，在mycat通过命令启动后，你只需要将数据库连接切换到Mycat的地址就可以了。如下面就可以进行连接了： mysql -h192.168.0.1 -P8806 -uroot -p123456连接成功后可以执行sql脚本了。所以，可以直接通过sql管理工具（如：navicat、datagrip）连接，执行脚本。我一直用datagrip来进行日常简单的管理，这个很方便。 Mycat还有一个管理的连接，端口号是9906. mysql -h192.168.0.1 -P9906 -uroot -p123456连接后可以根据管理命令查看Mycat的运行情况，当然，喜欢UI管理方式的人，可以安装一个Mycat-Web来进行管理，有兴趣自行搜索。 简而言之，开发中使用Mycat和直接使用Mysql机会没有差别。 常见问题 使用Mycat后总会遇到一些坑，我将自己遇到的一些问题在这里列一下，希望能与大家有共鸣： Mycat是不是配置以后，就能完全解决分表分库和读写分离问题？Mycat配合数据库本身的复制功能，可以解决读写分离的问题，但是针对分表分库的问题，不是完美的解决。或者说，至今为止，业界没有完美的解决方案。分表分库写入能完美解决，但是，不能完美解决主要是联表查询的问题，Mycat支持两个表联表的查询，多余两个表的查询不支持。 其实，很多数据库中间件关于分表分库后查询的问题，都是需要自己实现的，而且节本都不支持联表查询，Mycat已经算做地非常先进了。分表分库的后联表查询问题，大家通过合理数据库设计来避免。 Mycat支持哪些数据库，其他平台如 .net、PHP能用吗？官方说了，支持的数据库包括MySQL、SQL Server、Oracle、DB2、PostgreSQL 等主流数据库，很赞。尽量用Mysql,我试过SQL Server，会有些小问题，因为部分语法有点差异。 Mycat 非JAVA平台如 .net、PHP能用吗？可以用。这一点MyCat做的也很棒。 参考 《Mycat权威指南》： http://www.mycat.io/document/Mycat_V1.6.0.pdf官网 ：http://www.mycat.io/","categories":[{"name":"软件","slug":"软件","permalink":"https://shenyihan.github.io/categories/软件/"}],"tags":[{"name":"软件","slug":"软件","permalink":"https://shenyihan.github.io/tags/软件/"}]},{"title":"2018读书","slug":"2018读书","date":"2018-02-02T07:17:44.000Z","updated":"2018-02-02T07:18:43.428Z","comments":true,"path":"2018/02/02/2018读书/","link":"","permalink":"https://shenyihan.github.io/2018/02/02/2018读书/","excerpt":"","text":"金字塔原理","categories":[{"name":"读书","slug":"读书","permalink":"https://shenyihan.github.io/categories/读书/"}],"tags":[{"name":"读书","slug":"读书","permalink":"https://shenyihan.github.io/tags/读书/"}]},{"title":"微信机器人","slug":"微信机器人","date":"2018-01-15T07:51:40.000Z","updated":"2018-01-23T03:03:27.052Z","comments":true,"path":"2018/01/15/微信机器人/","link":"","permalink":"https://shenyihan.github.io/2018/01/15/微信机器人/","excerpt":"","text":"最近在做的项目，需要申请一些微信号进行营销工作，人工做费时费力。恰巧发现了wxpy可以实现让微信自动接收、处理消息然后进行回复的一系列功能。 现总结记录如下： 安装python，需要版本3以上yum install epel-release yum install python34 安装pipyum install python34-setuptools easy_install-3.4 pip 安装wxpypip3 install -i https://pypi.doubanio.com/simple/ -U wxpy 使用python3，pycharm根据wxpy官网操作即可。","categories":[{"name":"软件","slug":"软件","permalink":"https://shenyihan.github.io/categories/软件/"}],"tags":[{"name":"微信","slug":"微信","permalink":"https://shenyihan.github.io/tags/微信/"}]},{"title":"自律","slug":"自律","date":"2018-01-11T09:07:41.000Z","updated":"2018-01-11T09:10:57.717Z","comments":true,"path":"2018/01/11/自律/","link":"","permalink":"https://shenyihan.github.io/2018/01/11/自律/","excerpt":"","text":"首先转下在网上看到的关于自律的两句话。 王小波说，人一切的痛苦，本质上是对自己无能的愤怒。而自律，恰恰是解决人生痛苦的根本途径。比如拿运动来说，坚持运动的理由可能只有一个，但是放弃运动借口却有千千万。而对于高度自律的人，从来都不会给自己找任何借口。 只有自律的人，才能够真正掌控自己的人生，要知道一个人要管理好自己的行为和时间，往往并不需要很大外在的依赖和干预，更多的是克服自我的惰性并长期坚持养成各种好习惯。人往往都不能随心所欲，更多的是要做到严格约束自我行为，并逐渐变成有规律的好习惯，只有这样你才能获得更大的自由。 自律的第一点要慎独，一个人的自律不是给外面的人看的，更加不是为了晒朋友圈用的，而是自己对自己的严格要求，包括自我品格和道德意识的体现。正因为如此，我们更加应该关注在没人的时候，在别人看不见的时候做到严格要求和自我约束。一个高度自律的人往往有时候是孤独的，不需要太多的掌声，只需要听从你自己内心的声音，学会独处并孤芳自赏。 自律的第二点是接纳自己，不要去抱怨，不要去羡慕他人，不要去愤世嫉俗，更加不要怨天尤人，要勇于接纳现在的自己，包括自己所有的不完美。接纳自己本身也是个人成熟的表现，只有认识到自己的不足，从空虚和麻木中走出来，去努力寻求改变并付诸于自我实际行动。 自律的第三点是计划和目标，首先你要有目标，有了目标后制定详细的行动计划，然后就是严格的坚持和自律，并按照行动计划执行，在这个过程中不要给自己找任何借口，不要懈怠和放弃，坚持下来逐步形成自我的习惯和潜意识的行为和约束机制，那么你就是一个高度自律的人。","categories":[{"name":"生活","slug":"生活","permalink":"https://shenyihan.github.io/categories/生活/"}],"tags":[{"name":"感悟","slug":"感悟","permalink":"https://shenyihan.github.io/tags/感悟/"}]},{"title":"波浪理论","slug":"波浪理论","date":"2018-01-10T06:08:48.000Z","updated":"2018-01-11T06:27:27.138Z","comments":true,"path":"2018/01/10/波浪理论/","link":"","permalink":"https://shenyihan.github.io/2018/01/10/波浪理论/","excerpt":"","text":"一、记录学习地址： http://www.360doc.com/content/11/1106/09/5096590_162169092.shtml二、记录缠论中枢理解：","categories":[{"name":"金融","slug":"金融","permalink":"https://shenyihan.github.io/categories/金融/"}],"tags":[{"name":"理论","slug":"理论","permalink":"https://shenyihan.github.io/tags/理论/"}]},{"title":"理论剖析","slug":"理论剖析","date":"2018-01-01T01:56:16.000Z","updated":"2018-02-27T02:10:38.060Z","comments":true,"path":"2018/01/01/理论剖析/","link":"","permalink":"https://shenyihan.github.io/2018/01/01/理论剖析/","excerpt":"","text":"总结一些著名理论的适用场景 江恩理论关注两种时间周期：对等周期和对等循环周期对等周期：下跌和上涨时间（所用交易日）相同 对等循环周期：选定一组高低点，在这组高低点的区间内又有很多的高低点，区间内第一个高低点距离区间左临界位交易日个数为8T，则区间右临界位+8即为变盘点（顶或底）； 龙虎榜的重要性例如说佛山普澜二路证券营业部","categories":[{"name":"金融","slug":"金融","permalink":"https://shenyihan.github.io/categories/金融/"}],"tags":[{"name":"股票操作","slug":"股票操作","permalink":"https://shenyihan.github.io/tags/股票操作/"}]},{"title":"短线操作","slug":"短线操作","date":"2018-01-01T01:56:16.000Z","updated":"2018-02-01T08:44:27.575Z","comments":true,"path":"2018/01/01/短线操作/","link":"","permalink":"https://shenyihan.github.io/2018/01/01/短线操作/","excerpt":"","text":"此篇博文用于记录本人2018所有短线操作，操作标的选取采用自创数据指标加通达信软件预警提示。 暂称这个指标为涨峰回吐，根据股票历史数据回测年化收益率能达到50%，有成功当然也会有失败，探索阶段，努力试错。 20180111，买入：002208合肥城建 成交价：10:30， 20180112，卖出-----------------------：10.69. 盈利585 20180115，买入：002131利欧股份 成交价：2.81， 20180115，买入：300465高伟达 成交价：9.96， 20180116，卖出：300465高伟达 成交价：10.27，盈利437 20180122, 卖出：002131利欧股份 成交价：2.74，亏损521 20180124，买入：600992贵绳股份 成交价：11.45， 20180125，卖出：600992贵绳股份 成交价：11.55，盈利120 20180131，买入：002109兴化股份 成交价：7.24， 20180131，买入：002106莱宝高科 成交价：9.81， 20180201，卖出：002109兴化股份 成交价：7.50。盈利493 仅供参考，据此操作盈亏自负。","categories":[{"name":"金融","slug":"金融","permalink":"https://shenyihan.github.io/categories/金融/"}],"tags":[{"name":"股票操作","slug":"股票操作","permalink":"https://shenyihan.github.io/tags/股票操作/"}]},{"title":"zookeeper安装使用","slug":"PageName","date":"2017-12-30T05:38:58.000Z","updated":"2018-01-23T03:05:01.783Z","comments":true,"path":"2017/12/30/PageName/","link":"","permalink":"https://shenyihan.github.io/2017/12/30/PageName/","excerpt":"","text":"Zookeeper是一个协调服务，可以用它来作为配置维护、名字服务、分布式部署；下面，我来分享一下在Linux下安装Zookeeper的整个步骤，让大家少走弯路。 Zookeeper下载wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.9/zookeeper-3.4.9.tar.gz [plain] view plain copy print? [root@localhost 下载]# wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.3.6/zookeeper-3.3.6.tar.gz --2016-01-15 23:15:57-- http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.3.6/zookeeper-3.3.6.tar.gz 正在解析主机 mirror.bit.edu.cn (mirror.bit.edu.cn)... 114.247.56.117 正在连接 mirror.bit.edu.cn (mirror.bit.edu.cn)|114.247.56.117|:80... 已连接。 已发出 HTTP 请求，正在等待回应... 200 OK 长度：11833706 (11M) [application/octet-stream] 正在保存至: “zookeeper-3.3.6.tar.gz” 100%[======================================================================================================================================================================================&gt;] 11,833,706 171KB/s 用时 68s 2016-01-15 23:17:07 (170 KB/s) - 已保存 “zookeeper-3.3.6.tar.gz” [11833706/11833706]) 解压tar -zxvf /home/mgr/zookeeper-3.4.9.tar.gz [html] view plain copy print? [root@localhost deploy]# tar -zxvf /home/lk/下载/zookeeper-3.3.6.tar.gz 解压完之后，会在deploy文件夹下面得到一个zookeeper-3.3.6的文件夹 进入到conf目录[plain] view plain copy print? [root@localhost deploy]# cd /opt/deploy/zookeeper-3.3.6/conf 拷贝zoo_samle.cfg为zoo.cfg[plain] view plain copy print? [root@localhost conf]# cp zoo_sample.cfg zoo.cfg 编辑zoo.cfg文件[plain] view plain copy print? [root@localhost conf]# vi zoo.cfg 修改为： [html] view plain copy print? # The number of milliseconds of each tick tickTime=2000 # The number of ticks that the initial # synchronization phase can take initLimit=10 # The number of ticks that can pass between # sending a request and getting an acknowledgement syncLimit=5 # the directory where the snapshot is stored. dataDir=/usr/zookeeper dataLogDir=/usr/zookeeper/log # the port at which the clients will connect clientPort=2181 server.1=192.168.32.129:2888:3888 设置环境变量export ZOOKEEPER_INSTALL=/home/mgr/zookeeper-3.4.9 export PATH=$PATH:$ZOOKEEPER_INSTALL/bin [plain] view plain copy print? [root@localhost conf]# export ZOOKEEPER_INSTALL=/opt/deploy/zookeeper-3.3.6 [root@localhost conf]# export PATH=$PATH:$ZOOKEEPER_INSTALL/bin 启动[plain] view plain copy print? [root@localhost bin]# ./zkServer.sh start JMX enabled by default Using config: /opt/deploy/zookeeper-3.3.6/bin/../conf/zoo.cfg Starting zookeeper ... STARTED [root@localhost bin]# 测试zookeeper[plain] view plain copy print? [root@localhost bin]# ./zkCli.sh -server 192.168.32.129:2181 如果是本地连接，那么不需要 -server 192.168.32.129:2181,默认是本地 注意：如果出现拒绝连接，请检查如下： 1、防火墙是否关闭 systemctl stop firewalld 2、需要将192.168.32.129 映射到本地 /etc/hosts文件中，否则无法连接 集群配置：在一个zookeeper集群中，只要半数以上的机器正常工作，整个集群即可处于正常工作的状态。 例如：3台机器组成的集群，只要int(3/2)+1=2台机器正常工作即可。也就是说允许3台中的1台机器宕机 1、设置vi /etc/hosts加 172.16.10.107 zookeeper-01 172.16.10.164 zookeeper-02 172.16.10.166 zookeeper-03 2、配置zoo.cfg 增加 dataDir=/home/mgr/zookeeper-3.4.9/data dataLogDir=/home/mgr/zookeeper-3.4.9/log server.1=zookeeper-01:2888:3888 server.2=zookeeper-02:2888:3888 server.3=zookeeper-03:2888:3888 3、在data下新建myid 内容分别为1/2/3 4、./zkServer.sh restart(重启)；./zkServer.sh status(查看状态)；./zkServer.sh stop(关闭)","categories":[{"name":"软件","slug":"软件","permalink":"https://shenyihan.github.io/categories/软件/"}],"tags":[{"name":"软件安装","slug":"软件安装","permalink":"https://shenyihan.github.io/tags/软件安装/"}]},{"title":"介绍资本公积金","slug":"my-new-post","date":"2017-12-29T03:38:16.000Z","updated":"2018-01-11T06:28:19.634Z","comments":true,"path":"2017/12/29/my-new-post/","link":"","permalink":"https://shenyihan.github.io/2017/12/29/my-new-post/","excerpt":"","text":"公积金就是从企业成立至今所获得的所有的利润中保留的一部分。要理解资本公积金，必须结合 净资产，股本，未分配利润等 项目结合理解。净资产=股本+资本公积金+未分配利润举例来说：公司1990年成立 股本是1千万。公司的净资产也是1千万。一开始啥也没有，公积金就是零，未分配利润也是零。 5年后，90-95年公司总共获利2千万，净资产就变成了3千万。按照国家规定，利润的10%必须转成资本公积金。所以：股本还是1千万，公积金就是2百万，未分配利润就是1千8百万。总计净资产3千万。每股公积金要除以总股本，所以每股公积金=0.2元。每股未分配利润1.8元，每股净资产3元。 95年，公司赚到了钱，应该给股东发红利了。根据公司法，股东只能分未分配利润，而股本和公积金是不能挪用的。因此公司最多派发1千8百万红利。最终决定向股东派发2百万红利。分红之后：股本还是1千万，公积金2百万，未分配利润变成1千6百万，净资产变成2千8百万。 96年，公司上市，公司每股净资产是2.8元，那么发行价10元应该没问题。发行了6百万股新股，募集了6千万资金。而发行面值1元的股票，售价10元，多出的9元就会计入公积金。也就是多了5千4百万的公积金。IPO后：股本1千6百万，公积金提高到5千6百万，未分配利润没变1千6百万，净资产8千8百万。每股公积金：3.5元，每股未分配利润：1元，每股净资产：5.5元。 97年，公司开始玩送转游戏。 新股上市，在高增长，高送转的预期下，股价到达20元。公司决定：10转10. 啥意思？ 就是每10股股票通过公积金转增股本10股。总体数据：原来是这样的（单位百万元）： 股本16 ， 公积金56， 未分配利润16， 净资产88转增之后变成这样： 股本32， 公积金40， 未分配利润16， 净资产88每股数据：原来是这样的： 每股公积金：3.5元 每股未分配利润：1元 每股净资产：5.5元转增之后变成这样： 每股公积金：1.25元 每股未分配利润：0.5元 每股净资产：2.75元 除权后股价从20元变成10元，每10股变成20股。 每股公积金大幅降低，每股净资产减半。 综上所述，公积金是个什么玩意？公积金就是净资产的一个部分，净资产的增加必须靠利润或者发行新股，公积金的值其实就是历年积累的利润×10%加上新股发行溢价。公积金不能动，所以和股本差不多，可以转成股本。 每股公积金高意味着公司有高送转的潜力，送转对公司未来发展没有影响，对股东也没有派发红利，只是在财务上调整了一下数据。","categories":[{"name":"金融","slug":"金融","permalink":"https://shenyihan.github.io/categories/金融/"}],"tags":[{"name":"金融知识点","slug":"金融知识点","permalink":"https://shenyihan.github.io/tags/金融知识点/"}]},{"title":"hexo加密实例","slug":"hexo加密实例","date":"2017-12-28T09:58:18.000Z","updated":"2018-01-12T10:15:48.897Z","comments":true,"path":"2017/12/28/hexo加密实例/","link":"","permalink":"https://shenyihan.github.io/2017/12/28/hexo加密实例/","excerpt":"","text":"================================================ ================================================ 恭喜你，测试成功。去给自己的博客设置一道屏障吧。 ================================================ ================================================","categories":[{"name":"软件","slug":"软件","permalink":"https://shenyihan.github.io/categories/软件/"}],"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://shenyihan.github.io/tags/博客搭建/"}]},{"title":"hexo设置加密博文","slug":"hexo设置加密博文","date":"2017-12-28T09:45:55.000Z","updated":"2018-01-12T10:36:39.297Z","comments":true,"path":"2017/12/28/hexo设置加密博文/","link":"","permalink":"https://shenyihan.github.io/2017/12/28/hexo设置加密博文/","excerpt":"","text":"最近写了一篇个人文章，想设置成密码登录后才能观看。网上也试了一些其他人的方案，但基本都不能用 现就修改流程总结如下： 一、目 的：对某一篇文章输入密码后才能观看。 二、修改内容：1、增加js前端控制功能 mythemes\\layout\\_partial\\head.ejs 增加如下代码 &lt;% var password = page.password; if(password) { %&gt; &lt;script&gt; (function(){ if (prompt(&apos;请输入文章密码&apos;) != &quot;&lt;%= password %&gt;&quot;){ alert(&apos;密码错误！&apos;); history.back(); } })(); &lt;/script&gt; &lt;%}%&gt; 2、将需要设置加密模式观看的md文章抬头增加 password: 你的密码；类似于tags标签。 三、实 例： 链接：https://shenyihan.github.io/2017/12/28/hexo加密实例/ 密码：password","categories":[{"name":"软件","slug":"软件","permalink":"https://shenyihan.github.io/categories/软件/"}],"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://shenyihan.github.io/tags/博客搭建/"}]},{"title":"hexo从零开始到搭建完整","slug":"hello-world","date":"2017-12-27T03:38:16.000Z","updated":"2018-01-13T03:21:42.614Z","comments":true,"path":"2017/12/27/hello-world/","link":"","permalink":"https://shenyihan.github.io/2017/12/27/hello-world/","excerpt":"","text":"安装Git Bash安装NodeJs安装hexo生成SSH并添加到github部署项目上传到github绑定个人域名修改及配置主题添加RSS添加评论增加\\mythemes\\layout_partial\\plugins\\laibili.ejs &lt;% if (theme.livere_uid){ %&gt; (function(d, s) { var j, e = d.getElementsByTagName(s)[0]; if (typeof LivereTower === &apos;function&apos;) { return; } j = d.createElement(s); j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;; j.async = true; e.parentNode.insertBefore(j, e); })(document, &apos;script&apos;); &lt;/script&gt; &lt;noscript&gt; 为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt; &lt;/div&gt; &lt;!-- City版安装代码已完成 --&gt; &lt;/section&gt; &lt;% } %&gt; comment.ejs增加&lt;%- partial(‘../plugins/laibili’) %&gt;_config.yml增加livere_uid:xxxx写文章部分","categories":[{"name":"软件","slug":"软件","permalink":"https://shenyihan.github.io/categories/软件/"}],"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"https://shenyihan.github.io/tags/博客搭建/"}]},{"title":"about","slug":"about","date":"2017-12-20T07:37:01.000Z","updated":"2018-01-16T08:08:31.264Z","comments":true,"path":"2017/12/20/about/","link":"","permalink":"https://shenyihan.github.io/2017/12/20/about/","excerpt":"","text":"全世界只有不到百万分之一的人访问我的博客，你真是个特别的人 关于我： name：杨向成 backgroud:攻城狮 关于博客： 扯淡、分享 联系我： mail：yuren_88@126.com","categories":[{"name":"关于我","slug":"关于我","permalink":"https://shenyihan.github.io/categories/关于我/"}],"tags":[{"name":"关于我","slug":"关于我","permalink":"https://shenyihan.github.io/tags/关于我/"}]}]}