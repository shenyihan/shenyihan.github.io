<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人主页</title>
  
  <subtitle>Life doesn’t get easier，you just get stronger</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shenyihan.github.io/"/>
  <updated>2019-06-18T09:20:48.886Z</updated>
  <id>https://shenyihan.github.io/</id>
  
  <author>
    <name>杨向成</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于consul实现分布式锁</title>
    <link href="https://shenyihan.github.io/2019/06/18/%E5%9F%BA%E4%BA%8Econsul%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://shenyihan.github.io/2019/06/18/基于consul实现分布式锁/</id>
    <published>2019-06-18T09:04:28.000Z</published>
    <updated>2019-06-18T09:20:48.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于consul实现分布式锁"><a href="#基于consul实现分布式锁" class="headerlink" title="基于consul实现分布式锁"></a>基于consul实现分布式锁</h1><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>依托于consul的kv存储API中的acquire和release操作来实现，每个注册到consul的服务通过createsession方式获取sessionid</p><h2 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images2017.cnblogs.com/blog/285763/201712/285763-20171212165802457-1504617511.png" alt="流程图" title="">                </div>                <div class="image-caption">流程图</div>            </figure><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>三个类<br>BaseLock.java<br>Lock.java<br>TestLock.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ecwid.consul.v1.ConsulClient;</span><br><span class="line"><span class="keyword">import</span> com.ecwid.consul.v1.session.model.NewSession;</span><br><span class="line"><span class="keyword">import</span> com.ecwid.consul.v1.session.model.Session;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ConsulClient consulClient;</span><br><span class="line">    <span class="keyword">protected</span> String sessionId = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> String keyPath;   <span class="comment">// 互斥锁、信号量存储在consul中的基础key路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Timer timer;</span><br><span class="line">    <span class="comment">// consul session 超时时间</span></span><br><span class="line">    <span class="keyword">private</span> String sessionTTL = <span class="string">"10s"</span>;</span><br><span class="line">    <span class="comment">// consul renew session定时任务第一次执行延迟时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sessionTimerDelay = <span class="number">5000L</span>;</span><br><span class="line">    <span class="comment">// consul renew session定时任务每次执行时间间隔让consul知道此服务处于存活状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sessionTimerPeriod = <span class="number">3000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> consulClient</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey       同步锁在consul的KV存储中的Key路径，会自动增加prefix前缀，方便归类查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">BaseLock</span><span class="params">(ConsulClient consulClient, String lockKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.consulClient = consulClient;</span><br><span class="line">        <span class="keyword">this</span>.keyPath = lockKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建session</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sessionName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">createSession</span><span class="params">(String sessionName)</span> </span>&#123;</span><br><span class="line">        NewSession newSession = <span class="keyword">new</span> NewSession();</span><br><span class="line">        newSession.setName(sessionName);</span><br><span class="line">      </span><br><span class="line">        newSession.setBehavior(Session.Behavior.DELETE);</span><br><span class="line">        newSession.setTtl(sessionTTL);</span><br><span class="line">        <span class="keyword">this</span>.sessionId = consulClient.sessionCreate(newSession, <span class="keyword">null</span>).getValue();</span><br><span class="line">        timer = <span class="keyword">new</span> Timer();</span><br><span class="line">        timer.scheduleAtFixedRate(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                log.info(<span class="string">"renew session, key path=&#123;&#125;"</span>, keyPath);</span><br><span class="line">                consulClient.renewSession(sessionId, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; , sessionTimerDelay, sessionTimerPeriod);</span><br><span class="line">        <span class="keyword">return</span> consulClient.sessionCreate(newSession, <span class="keyword">null</span>).getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据成员变量sessionId来销毁session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">destroySession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sessionId != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cancelTimer();</span><br><span class="line">            consulClient.sessionDestroy(sessionId, <span class="keyword">null</span>);</span><br><span class="line">            sessionId = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cancelTimer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*if (EmptyUtil.isObjEmpty(timer)) &#123;</span></span><br><span class="line"><span class="comment">            return;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            timer.cancel();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"cancel timer failed, keyPath=&#123;&#125;, message=&#123;&#125;"</span>, keyPath, e.getMessage());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ecwid.consul.v1.ConsulClient;</span><br><span class="line"><span class="keyword">import</span> com.ecwid.consul.v1.kv.model.PutParams;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于Consul的互斥锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lock</span> <span class="keyword">extends</span> <span class="title">BaseLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String prefix = <span class="string">"lock/"</span>;  <span class="comment">// 同步锁参数前缀</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> consulClient</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey       同步锁在consul的KV存储中的Key路径，会自动增加prefix前缀，方便归类查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Lock</span><span class="params">(ConsulClient consulClient, String lockKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(consulClient, prefix + lockKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取同步锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> block            是否阻塞，直到获取到锁为止，默认尝试间隔时间为500ms。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">lock</span><span class="params">(<span class="keyword">boolean</span> block)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lock(block, <span class="number">500L</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取同步锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> block            是否阻塞，直到获取到锁为止</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeInterval     block=true时有效，再次尝试的间隔时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxTimes         block=true时有效，最大尝试次数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">lock</span><span class="params">(<span class="keyword">boolean</span> block, Long timeInterval, Integer maxTimes)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sessionId != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(sessionId + <span class="string">" - Already locked!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sessionId = createSession(<span class="string">"lock-"</span> + <span class="keyword">this</span>.keyPath);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            PutParams putParams = <span class="keyword">new</span> PutParams();</span><br><span class="line">            putParams.setAcquireSession(sessionId);</span><br><span class="line">            <span class="keyword">if</span>(consulClient.setKVValue(keyPath, <span class="string">"lock:"</span> + LocalDateTime.now(), putParams).getValue()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(block) &#123;</span><br><span class="line">                <span class="keyword">if</span>(maxTimes != <span class="keyword">null</span> &amp;&amp; count &gt;= maxTimes) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    count ++;</span><br><span class="line">                    <span class="keyword">if</span>(timeInterval != <span class="keyword">null</span>)</span><br><span class="line">                        Thread.sleep(timeInterval);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放同步锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            success = executeUnlock();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">executeUnlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        destroySession();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLock</span><span class="params">()</span> <span class="keyword">throws</span> Exception  </span>&#123;</span><br><span class="line">        ConsulClient consulClient = <span class="keyword">new</span> ConsulClient(<span class="string">"192.168.6.60"</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> LockRunner(<span class="number">1</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> LockRunner(<span class="number">2</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> LockRunner(<span class="number">3</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> LockRunner(<span class="number">4</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> LockRunner(<span class="number">5</span>)).start();</span><br><span class="line">        Thread.sleep(<span class="number">6000L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Lock lock = <span class="keyword">new</span> Lock(<span class="keyword">new</span> ConsulClient(<span class="string">"192.168.6.60"</span>), <span class="string">"lock-key"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取分布式互斥锁（参数含义：阻塞模式、每次尝试获取锁的间隔500ms、尝试n次）</span></span><br><span class="line">            <span class="keyword">if</span> (lock.lock(<span class="keyword">true</span>, <span class="number">500L</span>, <span class="number">10</span>)) &#123;</span><br><span class="line">                log.info(<span class="string">"Thread &#123;&#125; start!"</span>, flag);</span><br><span class="line">                <span class="comment">// 处理业务逻辑</span></span><br><span class="line">                Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">5000</span>));</span><br><span class="line">                log.info(<span class="string">"Thread &#123;&#125; end!"</span>, flag);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Life doesn’t get easier，you just get stronger。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>分布式事务</title>
    <link href="https://shenyihan.github.io/2019/05/29/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <id>https://shenyihan.github.io/2019/05/29/分布式事务/</id>
    <published>2019-05-29T09:30:13.000Z</published>
    <updated>2019-05-30T01:20:59.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式事务介绍"><a href="#分布式事务介绍" class="headerlink" title="分布式事务介绍"></a>分布式事务介绍</h1><ul><li>简单说下什么是分布式事务:分布式系统中一个请求请求多个服务时，要么同时成功要么同时失败。不能出现部分系统成功部分失败</li></ul><h1 id="分布式解决方案"><a href="#分布式解决方案" class="headerlink" title="分布式解决方案"></a>分布式解决方案</h1><h2 id="tx-lcn"><a href="#tx-lcn" class="headerlink" title="tx_lcn"></a>tx_lcn</h2><ul><li>TX-LCN 主要有两个模块，Tx-Client(TC) Tx-Manager(TM). TC作为微服务下的依赖，TM是独立的服务。</li><li>官网：<a href="http://www.txlcn.org/zh-cn/index.html" target="_blank" rel="noopener">http://www.txlcn.org/zh-cn/index.html</a></li></ul><h2 id="seata-目前不建议线上版本"><a href="#seata-目前不建议线上版本" class="headerlink" title="seata(目前不建议线上版本)"></a>seata(目前不建议线上版本)</h2><ul><li>对业务无侵入：即减少技术架构上的微服务化所带来的分布式事务问题对业务的侵入</li><li>高性能：减少分布式事务解决方案所带来的性能消耗</li><li>说明：<a href="https://blog.csdn.net/hosaos/article/details/89136666" target="_blank" rel="noopener">https://blog.csdn.net/hosaos/article/details/89136666</a></li></ul>]]></content>
    
    <summary type="html">
    
      Life doesn’t get easier，you just get stronger。
    
    </summary>
    
      <category term="软件" scheme="https://shenyihan.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="软件" scheme="https://shenyihan.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>源码项目</title>
    <link href="https://shenyihan.github.io/2019/05/29/%E6%BA%90%E7%A0%81%E9%A1%B9%E7%9B%AE/"/>
    <id>https://shenyihan.github.io/2019/05/29/源码项目/</id>
    <published>2019-05-29T01:11:38.000Z</published>
    <updated>2019-05-29T09:01:36.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="管理后台"><a href="#管理后台" class="headerlink" title="管理后台"></a>管理后台</h1><h2 id="eladmin"><a href="#eladmin" class="headerlink" title="eladmin"></a>eladmin</h2><ul><li>项目基于 Spring Boot 2.1.0 、 Jpa、 Spring Security、redis、Vue的前后端分离的后台管理系统，项目采用分模块开发方式， 权限控制采用 RBAC，支持数据字典与数据权限管理，支持一键生成前后端代码，支持动态路由</li><li>源码地址：<a href="https://github.com/elunez/eladmin" target="_blank" rel="noopener">https://github.com/elunez/eladmin</a></li><li>演示地址：<a href="https://auauz.net" target="_blank" rel="noopener">https://auauz.net</a></li></ul><h2 id="ruoyi"><a href="#ruoyi" class="headerlink" title="ruoyi"></a>ruoyi</h2><ul><li>基于SpringBoot2.1的权限管理系统 易读易懂、界面简洁美观。 核心技术采用Spring、MyBatis、Shiro没有任何其它重度依赖。直接运行即可用</li><li>源码地址：<a href="https://github.com/lerry903/RuoYi" target="_blank" rel="noopener">https://github.com/lerry903/RuoYi</a></li><li>演示地址：<a href="http://ruoyi.vip/login" target="_blank" rel="noopener">http://ruoyi.vip/login</a></li></ul><h1 id="接口管理平台"><a href="#接口管理平台" class="headerlink" title="接口管理平台"></a>接口管理平台</h1><h2 id="哆啦接口管理"><a href="#哆啦接口管理" class="headerlink" title="哆啦接口管理"></a>哆啦接口管理</h2><ul><li>支持多团队、多项目、多环境，带给你更多的方便，支持完整的权限管理，功能权限（菜单权限，节点权限）、数据权限（项目权限，分类权限）</li><li>官方地址：<a href="https://www.smaty.net/" target="_blank" rel="noopener">https://www.smaty.net/</a></li><li>项目部署及配置：<a href="https://shuka.smaty.net/t/xapimanager" target="_blank" rel="noopener">https://shuka.smaty.net/t/xapimanager</a>   (安装和升级请参考手册)</li></ul>]]></content>
    
    <summary type="html">
    
      Life doesn’t get easier，you just get stronger。
    
    </summary>
    
      <category term="软件" scheme="https://shenyihan.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="源码" scheme="https://shenyihan.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>实用工具</title>
    <link href="https://shenyihan.github.io/2019/05/29/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <id>https://shenyihan.github.io/2019/05/29/实用工具/</id>
    <published>2019-05-29T01:11:38.000Z</published>
    <updated>2019-05-29T09:00:55.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><ul><li><a href="https://funtl.com/" target="_blank" rel="noopener">https://funtl.com/</a></li></ul>]]></content>
    
    <summary type="html">
    
      Life doesn’t get easier，you just get stronger。
    
    </summary>
    
      <category term="软件" scheme="https://shenyihan.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="实用工具" scheme="https://shenyihan.github.io/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Boot自定义启动图案</title>
    <link href="https://shenyihan.github.io/2018/05/11/Spring-Boot%E8%87%AA%E5%AE%9A%E4%B9%89%E5%90%AF%E5%8A%A8%E5%9B%BE%E6%A1%88/"/>
    <id>https://shenyihan.github.io/2018/05/11/Spring-Boot自定义启动图案/</id>
    <published>2018-05-11T04:41:18.000Z</published>
    <updated>2018-05-25T09:38:58.007Z</updated>
    
    <content type="html"><![CDATA[<p>Spring-Boot启动的时候会打印出spring官方的图案:</p><h1 id="自定义这个图案方法如下"><a href="#自定义这个图案方法如下" class="headerlink" title="自定义这个图案方法如下:"></a>自定义这个图案方法如下:</h1><pre><code>在/src/main/resources/新建一个banner.txt文件登陆:http://patorjk.com/software/taag将框中Type Something 替换成自己的单词字母,再将下面生成的图案复制到刚刚创建的那个txt中,再次启动项目,发现图案改变了</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring-Boot启动的时候会打印出spring官方的图案:&lt;/p&gt;
&lt;h1 id=&quot;自定义这个图案方法如下&quot;&gt;&lt;a href=&quot;#自定义这个图案方法如下&quot; class=&quot;headerlink&quot; title=&quot;自定义这个图案方法如下:&quot;&gt;&lt;/a&gt;自定义这个图案方法如下:
      
    
    </summary>
    
      <category term="软件" scheme="https://shenyihan.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="软件" scheme="https://shenyihan.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>rabbitMQ死信队列</title>
    <link href="https://shenyihan.github.io/2018/05/03/rabbitMQ%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/"/>
    <id>https://shenyihan.github.io/2018/05/03/rabbitMQ死信队列/</id>
    <published>2018-05-03T06:10:19.000Z</published>
    <updated>2018-05-25T09:38:50.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h1><pre><code>MQ队列信息消费失败后进入死信队列，实现延迟队列</code></pre><h1 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h1><pre><code>DLX, Dead-Letter-Exchange。利用DLX, 当消息在一个队列中变成死信（dead message）之后，它能被重新publish到另一个Exchange，这个Exchange就是DLX。消息变成死信一向有一下几种情况：消息被拒绝（basic.reject/ basic.nack）并且requeue=false消息TTL过期（参考：RabbitMQ之TTL（Time-To-Live 过期时间））队列达到最大长度    DLX也是一个正常的Exchange，和一般的Exchange没有区别，它能在任何的队列上被指定，实际上就是设置某个队列的属性，当这个队列中有死信时，RabbitMQ就会自动的将这个消息重新发布到设置的Exchange上去，进而被路由到另一个队列，可以监听这个队列中消息做相应的处理，这个特性可以弥补RabbitMQ 3.0以前支持的immediate参数（可以参考RabbitMQ之mandatory和immediate）的功能。</code></pre><h1 id="使用说明："><a href="#使用说明：" class="headerlink" title="使用说明："></a>使用说明：</h1><pre><code>@Beanpublic Queue fundConfirmQueue() {    Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();    //设置死信交换机    map.put(&quot;x-dead-letter-exchange&quot;, MessageQueueName.DLX_EXCHANGE);    //设置死信routingKey    map.put(&quot;x-dead-letter-routing-key&quot;, MessageQueueName.DLX_ROUTING_KEY);    //消息被确认前的最大等待时间，默认为无限大    //arguments.put(&quot;x-message-ttl&quot;, 60000);    //消息队列的最大大长度，默认永不过期    //arguments.put(&quot;x-max-length&quot;, 300);    Queue queue = new Queue(MessageQueueName.fundConfirmQueue,true, false, false, map);    return queue;}@Beanpublic Queue fundCancelQueue() {    Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();    //设置死信交换机    map.put(&quot;x-dead-letter-exchange&quot;, MessageQueueName.DLX_EXCHANGE);    //设置死信routingKey    map.put(&quot;x-dead-letter-routing-key&quot;, MessageQueueName.DLX_ROUTING_KEY);    Queue queue = new Queue(MessageQueueName.fundCancelQueue,true, false, false, map);    return queue;}/** * 死信交换机 */@Beanpublic DirectExchange dlxExchange() {    return new DirectExchange(MessageQueueName.DLX_EXCHANGE);}/** * 死信队列 */@Beanpublic Queue dlxQueue() {    return new Queue(MessageQueueName.DLX_QUEUE,true,false,false);}/** * 通过死信路由key绑定死信交换机和死信队列 */@Beanpublic Binding dlxBinding() {    return BindingBuilder.bind(dlxQueue()).to(dlxExchange())            .with(MessageQueueName.DLX_ROUTING_KEY);}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;应用场景：&quot;&gt;&lt;a href=&quot;#应用场景：&quot; class=&quot;headerlink&quot; title=&quot;应用场景：&quot;&gt;&lt;/a&gt;应用场景：&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;MQ队列信息消费失败后进入死信队列，实现延迟队列
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;介绍：&quot;
      
    
    </summary>
    
      <category term="软件" scheme="https://shenyihan.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="软件" scheme="https://shenyihan.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>免费制作网站；</title>
    <link href="https://shenyihan.github.io/2018/04/28/%E5%85%8D%E8%B4%B9%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99/"/>
    <id>https://shenyihan.github.io/2018/04/28/免费制作网站/</id>
    <published>2018-04-28T05:47:54.000Z</published>
    <updated>2018-05-24T05:55:53.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>旨在方便个人和企业快速搭建个人网站，本人利用业余时间在阿里云上搭建一套网站制作程序共享给大家。全部免费；</p><h1 id="登录地址"><a href="#登录地址" class="headerlink" title="登录地址"></a>登录地址</h1><p><a href="http://jujitouzi.com:8080/regByPhone.do?inviteid=392" target="_blank" rel="noopener">http://jujitouzi.com:8080/regByPhone.do?inviteid=392</a></p><h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><p>1、注册成功后发送将个人信息（姓名、电话、邮箱）发送至yuren_88@126.com；<br>2、管理员审核通过后可登录进行修改自己的网站；<br>3、需要域名的可以购买域名后直接绑定到预览页面即可；</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>各种问题及合作可以发送至yuren_88@126.com；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;旨在方便个人和企业快速搭建个人网站，本人利用业余时间在阿里云上搭建一套网站制作程序共享给大家。全部免费；&lt;/p&gt;
&lt;h1 id=&quot;登录地址&quot;
      
    
    </summary>
    
      <category term="软件" scheme="https://shenyihan.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="软件" scheme="https://shenyihan.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>关于wluck开源说明</title>
    <link href="https://shenyihan.github.io/2018/04/24/%E5%85%B3%E4%BA%8Ewluck%E5%BC%80%E6%BA%90%E8%AF%B4%E6%98%8E/"/>
    <id>https://shenyihan.github.io/2018/04/24/关于wluck开源说明/</id>
    <published>2018-04-24T05:43:24.000Z</published>
    <updated>2018-05-25T09:39:08.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="wluck介绍"><a href="#wluck介绍" class="headerlink" title="wluck介绍"></a>wluck介绍</h1><p>wluck寓意为we luck，希望带给每一位使用者好运，当然还有框架的提供者们以及开源社区的朋友们。<br>wluck是使用springboot开发的一款后台管理基础系统，拿来即用。</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>管理后台功能包含：用户管理、角色管理、权限管理、部门管理、菜单管理、字典管理、登录日志、操作日志、durid监控、通知管理等基础模块</p><h1 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h1><p>采用springboot模块化开发、maven项目管理。<br>整合架构：springboot+shiro+beetl+MyBatisplus+durid。</p><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p><a href="https://github.com/shenyihan/wluck" target="_blank" rel="noopener">https://github.com/shenyihan/wluck</a></p><h1 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h1><p>1、下载源码至idea。<br><br>2、使用项目中sql文件新建数据库并增加基础数据，修改Application.properties配置文件中数据库用户和密码。<br><br>3、直接运行WLuckMgrApplication.main()方法即可。<br><br>4、输入<a href="http://localhost:8090/" target="_blank" rel="noopener">http://localhost:8090/</a> 用户名密码admin/111111。<br></p><h1 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h1><p>欢迎各位将使用中的问题反馈至yuren_88@126.com。</p><h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><p>此项目借鉴开源项目及架构开发，作为本人学习与使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;wluck介绍&quot;&gt;&lt;a href=&quot;#wluck介绍&quot; class=&quot;headerlink&quot; title=&quot;wluck介绍&quot;&gt;&lt;/a&gt;wluck介绍&lt;/h1&gt;&lt;p&gt;wluck寓意为we luck，希望带给每一位使用者好运，当然还有框架的提供者们以及开源社区的朋友们
      
    
    </summary>
    
      <category term="软件" scheme="https://shenyihan.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="软件" scheme="https://shenyihan.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>形态研究记录</title>
    <link href="https://shenyihan.github.io/2018/04/14/%E5%BD%A2%E6%80%81%E7%A0%94%E7%A9%B6%E8%AE%B0%E5%BD%95/"/>
    <id>https://shenyihan.github.io/2018/04/14/形态研究记录/</id>
    <published>2018-04-14T07:37:29.000Z</published>
    <updated>2018-04-14T07:37:29.526Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mybatis-plus应用</title>
    <link href="https://shenyihan.github.io/2018/04/10/mybatis-plus%E5%BA%94%E7%94%A8/"/>
    <id>https://shenyihan.github.io/2018/04/10/mybatis-plus应用/</id>
    <published>2018-04-10T05:51:10.000Z</published>
    <updated>2018-04-10T07:08:18.057Z</updated>
    
    <content type="html"><![CDATA[<h1 id="官方学习文档："><a href="#官方学习文档：" class="headerlink" title="官方学习文档："></a>官方学习文档：</h1><pre><code>http://baomidou.oschina.io/mybatis-plus-doc/#/?id=%e7%ae%80%e4%bb%8b</code></pre><h1 id="配置："><a href="#配置：" class="headerlink" title="配置："></a>配置：</h1><pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;    &lt;artifactId&gt;mybatis-plus&lt;/artifactId&gt;    &lt;version&gt;2.1.8&lt;/version&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatisplus-spring-boot-starter --&gt;&lt;dependency&gt;    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;    &lt;artifactId&gt;mybatisplus-spring-boot-starter&lt;/artifactId&gt;    &lt;version&gt;1.0.5&lt;/version&gt;&lt;/dependency&gt;</code></pre><h1 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h1><pre><code>1、通过实现baseMapper的**mapper调用数据操作方法，例如userMapper.insert(user);2、ActiveRecord 方式 实现model类，通过实例类来操作，例如user.insert();</code></pre><h1 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h1><pre><code>https://github.com/shenyihan/MyBatisPlusLearn</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;官方学习文档：&quot;&gt;&lt;a href=&quot;#官方学习文档：&quot; class=&quot;headerlink&quot; title=&quot;官方学习文档：&quot;&gt;&lt;/a&gt;官方学习文档：&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;http://baomidou.oschina.io/mybatis-plus-do
      
    
    </summary>
    
      <category term="软件" scheme="https://shenyihan.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="软件" scheme="https://shenyihan.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>自律</title>
    <link href="https://shenyihan.github.io/2018/04/06/%E8%87%AA%E5%BE%8B/"/>
    <id>https://shenyihan.github.io/2018/04/06/自律/</id>
    <published>2018-04-06T09:07:41.000Z</published>
    <updated>2018-05-25T09:39:28.631Z</updated>
    
    <content type="html"><![CDATA[<p>首先转下在网上看到的关于自律的两句话。</p><p>王小波说，人一切的痛苦，本质上是对自己无能的愤怒。而自律，恰恰是解决人生痛苦的根本途径。比如拿运动来说，坚持运动的理由可能只有一个，但是放弃运动借口却有千千万。而对于高度自律的人，从来都不会给自己找任何借口。</p><p>只有自律的人，才能够真正掌控自己的人生，要知道一个人要管理好自己的行为和时间，往往并不需要很大外在的依赖和干预，更多的是克服自我的惰性并长期坚持养成各种好习惯。人往往都不能随心所欲，更多的是要做到严格约束自我行为，并逐渐变成有规律的好习惯，只有这样你才能获得更大的自由。</p><p>自律的第一点要慎独，一个人的自律不是给外面的人看的，更加不是为了晒朋友圈用的，而是自己对自己的严格要求，包括自我品格和道德意识的体现。正因为如此，我们更加应该关注在没人的时候，在别人看不见的时候做到严格要求和自我约束。一个高度自律的人往往有时候是孤独的，不需要太多的掌声，只需要听从你自己内心的声音，学会独处并孤芳自赏。</p><p>自律的第二点是接纳自己，不要去抱怨，不要去羡慕他人，不要去愤世嫉俗，更加不要怨天尤人，要勇于接纳现在的自己，包括自己所有的不完美。接纳自己本身也是个人成熟的表现，只有认识到自己的不足，从空虚和麻木中走出来，去努力寻求改变并付诸于自我实际行动。</p><p>自律的第三点是计划和目标，首先你要有目标，有了目标后制定详细的行动计划，然后就是严格的坚持和自律，并按照行动计划执行，在这个过程中不要给自己找任何借口，不要懈怠和放弃，坚持下来逐步形成自我的习惯和潜意识的行为和约束机制，那么你就是一个高度自律的人。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先转下在网上看到的关于自律的两句话。&lt;/p&gt;
&lt;p&gt;王小波说，人一切的痛苦，本质上是对自己无能的愤怒。而自律，恰恰是解决人生痛苦的根本途径。比如拿运动来说，坚持运动的理由可能只有一个，但是放弃运动借口却有千千万。而对于高度自律的人，从来都不会给自己找任何借口。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="生活" scheme="https://shenyihan.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="感悟" scheme="https://shenyihan.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>Docker 的常用操作命令和 Tomcat 的安装</title>
    <link href="https://shenyihan.github.io/2018/03/26/Docker-%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E5%92%8C-Tomcat-%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <id>https://shenyihan.github.io/2018/03/26/Docker-的常用操作命令和-Tomcat-的安装/</id>
    <published>2018-03-26T09:21:53.000Z</published>
    <updated>2018-05-25T09:38:29.463Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Docker-的常用操作命令和-Tomcat-的安装"><a href="#Docker-的常用操作命令和-Tomcat-的安装" class="headerlink" title="Docker 的常用操作命令和 Tomcat 的安装"></a>Docker 的常用操作命令和 Tomcat 的安装</h1><p>我们在安装完 Docker 后，肯定想第一时间安装对应的应用。那么该如何在 Docker 容器中安装应用呢？如何启动和访问 </p><p>Docker 的所有命令，都可以在 Docker-hub 上找到对应资料，<a href="https://hub.docker.com/。" target="_blank" rel="noopener">https://hub.docker.com/。</a></p><h2 id="Docker-的-4-个主要的镜像操作命令。"><a href="#Docker-的-4-个主要的镜像操作命令。" class="headerlink" title="Docker 的 4 个主要的镜像操作命令。"></a>Docker 的 4 个主要的镜像操作命令。</h2><p>操作    命令    说明<br>检索    docker search 关键字 eg：docker search redis    我们经常去docker hub上检索镜像的详细信息，如镜像的TAG。<br>拉取    docker pull 镜像名:tag    :tag是可选的，tag表示标签，多为软件的版本，默认是latest<br>列表    docker images    查看所有本地镜像<br>删除    docker rmi image-id    删除指定的本地镜像<br>靠上面 4 个主要的命令，我们基本上就可以做到得心应手。下面我以操作 Tomcat 为例，在详细的介绍一下 Docker 对应用的安装，启动，卸载，端口映射等教程。</p><h2 id="Docker-的容器操作"><a href="#Docker-的容器操作" class="headerlink" title="Docker 的容器操作"></a>Docker 的容器操作</h2><p>Docker 的软件镜像（就像QQ安装程序一样）需要通过运行镜像，然后产生一个容器（正在运行的软件，运行的QQ）；最后我们就可以使用这个容器了（使用QQ）。下面我们以 Tomcat 为例说说 Docker 的容器操作相关的命令。</p><p>在运行软件镜像之前，我们先需要搜索一下，这个镜像的版本等信息。相关搜索镜像命令如下：</p><p>[root@localhost ~]# docker search tomcat<br>搜索到对应的镜像后，我们就可以拉取镜像了。</p><p>[root@localhost ~]# docker pull tomcat<br>拉去到镜像后，就可以根据镜像启动容器了。</p><p>docker run –name mytomcat -d tomcat:latest<br>再接下来，我们就可以使用 docker ps  命令查看运行中的容器。</p><p>[root@localhost ~]# docker ps<br>docker ps -a 命令是查看所有的容器，包括运行的和非运行的。</p><p>停止运行中的容器，可以使用 docker stop 命令。</p><p>docker stop  容器的id<br>查看所有的容器</p><p>docker ps -a<br>启动容器</p><p>docker start 容器id<br>删除一个容器</p><p>docker rm 容器id<br>启动一个做了端口映射的tomcat</p><p>[root@localhost ~]# docker run -d -p 8888:8080 tomcat<br>参数说明：<br>-d：后台运行<br>-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口</p><p>关闭 linux 防火墙命令：</p><p>service firewalld status #查看防火墙状态<br>service firewalld stop #关闭防火墙<br>查看容器的日志</p><p>docker logs container-name/container-id</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Docker-的常用操作命令和-Tomcat-的安装&quot;&gt;&lt;a href=&quot;#Docker-的常用操作命令和-Tomcat-的安装&quot; class=&quot;headerlink&quot; title=&quot;Docker 的常用操作命令和 Tomcat 的安装&quot;
      
    
    </summary>
    
      <category term="软件" scheme="https://shenyihan.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="软件" scheme="https://shenyihan.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装</title>
    <link href="https://shenyihan.github.io/2018/03/25/Docker%E5%AE%89%E8%A3%85/"/>
    <id>https://shenyihan.github.io/2018/03/25/Docker安装/</id>
    <published>2018-03-25T08:58:01.000Z</published>
    <updated>2018-05-25T09:04:32.709Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="在-linux-虚拟机上安装-docker"><a href="#在-linux-虚拟机上安装-docker" class="headerlink" title="在 linux 虚拟机上安装 docker"></a>在 linux 虚拟机上安装 docker</h2><p>第一步，检查 Linux 系统的内核版本，Docker 需要的内核必须是 3.10 及以上。检查内核版本的命令如下：<br>uname -r</p><p>第二步，如果 Linux 版本是 3.10 以上，那么我们就可以进行安装 docker 了。安装 Docker 的命令如下：<br>yum install docker<br>安装过程中，提示输入 y/n 我们输入 y 进行确认安装。</p><p>第三步，在安装完成后，我们就可以正在的操作 Docker 了。下面是启动 docker 的命令：<br>[root@localhost ~]# systemctl start docker<br>[root@localhost ~]# docker -v<br>Docker version 1.12.6, build 3e8e77d/1.12.6<br>启动完成后，我们可以使用 docker -v 命令查看安装的 Docker 的版本信息。</p><p>第四步，设置 Docker 开机自启动。相关命令如下：<br>[root@localhost ~]# systemctl enable docker<br>Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</p><p>最后，我们再说说如何停止 docker。只需使用 systemctl stop docker 即可停止 Docker。<br>systemctl stop docker</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;在-linux-虚拟机上安装-docker&quot;&gt;&lt;a href=&quot;#在-linux-虚拟机上安装-docker&quot; class=&quot;headerlink&quot; title=&quot;在 linux 虚拟机上安装 docker&quot;&gt;&lt;/a&gt;在 linux 虚拟
      
    
    </summary>
    
      <category term="软件" scheme="https://shenyihan.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="软件" scheme="https://shenyihan.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>mycat学习使用</title>
    <link href="https://shenyihan.github.io/2018/03/02/mycat%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/"/>
    <id>https://shenyihan.github.io/2018/03/02/mycat学习使用/</id>
    <published>2018-03-02T07:17:44.000Z</published>
    <updated>2018-03-29T06:25:46.525Z</updated>
    
    <content type="html"><![CDATA[<p>安装</p><p>Mycat官网：<a href="http://www.mycat.io/" target="_blank" rel="noopener">http://www.mycat.io/</a><br>可以了解下Mycat的背景和应用情况，这样使用起来比较有信心。</p><p>Mycat下载地址：<a href="http://dl.mycat.io/" target="_blank" rel="noopener">http://dl.mycat.io/</a><br>官网有个文档，属于详细的介绍，初次入门，看起来比较花时间。</p><p>下载：<br>建议大家选择 1.6-RELEASE 版本，毕竟是比较稳定的版本。</p><p>安装：<br>根据不同的系统选择不同的版本。包括linux、windows、mac,作者考虑还是非常周全的，当然，也有源码版的。（ps:源码版的下载后，只要配置正确，就可以正常运行调试，这个赞一下。）</p><p>Mycat的安装其实只要解压下载的目录就可以了，非常简单。<br>安装完成后，目录如下：</p><p>目录    说明<br>bin    mycat命令，启动、重启、停止等<br>catlet    catlet为Mycat的一个扩展功能<br>conf    Mycat 配置信息,重点关注<br>lib    Mycat引用的jar包，Mycat是java开发的<br>logs    日志文件，包括Mycat启动的日志和运行的日志。<br>配置</p><p>Mycat的配置文件都在conf目录里面，这里介绍几个常用的文件：</p><p>文件    说明<br>server.xml    Mycat的配置文件，设置账号、参数等<br>schema.xml    Mycat对应的物理数据库和数据库表的配置<br>rule.xml    Mycat分片（分库分表）规则<br>Mycat的架构其实很好理解，Mycat是代理，Mycat后面就是物理数据库。和Web服务器的Nginx类似。对于使用者来说，访问的都是Mycat，不会接触到后端的数据库。<br>我们现在做一个主从、读写分离，简单分表的示例。结构如下图：</p><p>服务器    IP    说明<br>Mycat    192.168.0.2    mycat服务器，连接数据库时，连接此服务器<br>database1    192.168.0.3    物理数据库1，真正存储数据的数据库<br>database2    192.168.0.4    物理数据库2，真正存储数据的数据库<br>Mycat作为主数据库中间件，肯定是与代码弱关联的，所以代码是不用修改的，使用Mycat后，连接数据库是不变的，默认端口是8066。连接方式和普通数据库一样，如：jdbc:mysql://192.168.0.2:8066/</p><p>server.xml</p><p>示例</p><p><user name="test"><br>        <property name="password">test</property><br>        <property name="schemas">lunch</property><br>        <property name="readOnly">false</property>  </user></p><pre><code>    &lt;!-- 表级 DML 权限设置 --&gt;    &lt;!--            &lt;privileges check=&quot;false&quot;&gt;        &lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;            &lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;            &lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;        &lt;/schema&gt;    &lt;/privileges&gt;            --&gt;&lt;/user&gt;</code></pre><p>重点关注下面这段，其他默认即可。</p><p>参数    说明<br>user    用户配置节点<br>–name    登录的用户名，也就是连接Mycat的用户名<br>–password    登录的密码，也就是连接Mycat的密码<br>–schemas    数据库名，这里会和schema.xml中的配置关联，多个用逗号分开，例如需要这个用户需要管理两个数据库db1,db2，则配置db1,dbs<br>–privileges    配置用户针对表的增删改查的权限，具体见文档吧<br>我这里配置了一个账号test 密码也是test,针对数据库lunch,读写权限都有，没有针对表做任何特殊的权限。</p><p>schema.xml<br>schema.xml是最主要的配置项，首先看我的配置文件。</p><p>&lt;?xml version=”1.0”?&gt;<br>&lt;!DOCTYPE mycat:schema SYSTEM “schema.dtd”&gt;</p><mycat:schema xmlns:mycat="http://io.mycat/"><!-- 数据库配置，与server.xml中的数据库对应 --><pre><code>&lt;schema name=&quot;lunch&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot;&gt;    &lt;table name=&quot;lunchmenu&quot; dataNode=&quot;dn1&quot;  /&gt;    &lt;table name=&quot;restaurant&quot; dataNode=&quot;dn1&quot;  /&gt;    &lt;table name=&quot;userlunch&quot; dataNode=&quot;dn1&quot;  /&gt;    &lt;table name=&quot;users&quot; dataNode=&quot;dn1&quot;  /&gt;    &lt;table name=&quot;dictionary&quot; primaryKey=&quot;id&quot; autoIncrement=&quot;true&quot; dataNode=&quot;dn1,dn2&quot;  rule=&quot;mod-long&quot; /&gt;&lt;/schema&gt;</code></pre><!-- 分片配置 --><pre><code>&lt;dataNode name=&quot;dn1&quot; dataHost=&quot;test1&quot; database=&quot;lunch&quot; /&gt;&lt;dataNode name=&quot;dn2&quot; dataHost=&quot;test2&quot; database=&quot;lunch&quot; /&gt;</code></pre><!-- 物理数据库配置 --><pre><code>&lt;dataHost name=&quot;test1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&gt;    &lt;heartbeat&gt;select user();&lt;/heartbeat&gt;    &lt;writeHost host=&quot;hostM1&quot; url=&quot;192.168.0.2:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt;      &lt;/writeHost&gt;&lt;/dataHost&gt;&lt;dataHost name=&quot;test2&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&gt;    &lt;heartbeat&gt;select user();&lt;/heartbeat&gt;    &lt;writeHost host=&quot;hostS1&quot; url=&quot;192.168.0.3:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt;      &lt;/writeHost&gt;&lt;/dataHost&gt;</code></pre><p></p></mycat:schema><br>参数    说明<br>schema    数据库设置，此数据库为逻辑数据库，name与server.xml中schema对应<br>dataNode    分片信息，也就是分库相关配置<br>dataHost    物理数据库，真正存储数据的数据库<br>每个节点的属性逐一说明：<p></p><p>schema:</p><p>属性    说明<br>name    逻辑数据库名，与server.xml中的schema对应<br>checkSQLschema    数据库前缀相关设置，建议看文档，这里暂时设为folse<br>sqlMaxLimit    select 时默认的limit，避免查询全表<br>table:</p><p>属性    说明<br>name    表名，物理数据库中表名<br>dataNode    表存储到哪些节点，多个节点用逗号分隔。节点为下文dataNode设置的name<br>primaryKey    主键字段名，自动生成主键时需要设置<br>autoIncrement    是否自增<br>rule    分片规则名，具体规则下文rule详细介绍<br>dataNode</p><p>属性    说明<br>name    节点名，与table中dataNode对应<br>datahost    物理数据库名，与datahost中name对应<br>database    物理数据库中数据库名<br>dataHost</p><p>属性    说明<br>name    物理数据库名，与dataNode中dataHost对应<br>balance    均衡负载的方式<br>writeType    写入方式<br>dbType    数据库类型<br>heartbeat    心跳检测语句，注意语句结尾的分号要加。<br>应用场景</p><p>数据库分表分库</p><p>配置如下：</p><p>&lt;?xml version=”1.0”?&gt;<br>&lt;!DOCTYPE mycat:schema SYSTEM “schema.dtd”&gt;</p><mycat:schema xmlns:mycat="http://io.mycat/"><!-- 数据库配置，与server.xml中的数据库对应 --><pre><code>&lt;schema name=&quot;lunch&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot;&gt;    &lt;table name=&quot;lunchmenu&quot; dataNode=&quot;dn1&quot;  /&gt;    &lt;table name=&quot;restaurant&quot; dataNode=&quot;dn1&quot;  /&gt;    &lt;table name=&quot;userlunch&quot; dataNode=&quot;dn1&quot;  /&gt;    &lt;table name=&quot;users&quot; dataNode=&quot;dn1&quot;  /&gt;    &lt;table name=&quot;dictionary&quot; primaryKey=&quot;id&quot; autoIncrement=&quot;true&quot; dataNode=&quot;dn1,dn2&quot;  rule=&quot;mod-long&quot; /&gt;&lt;/schema&gt;</code></pre><!-- 分片配置 --><pre><code>&lt;dataNode name=&quot;dn1&quot; dataHost=&quot;test1&quot; database=&quot;lunch&quot; /&gt;&lt;dataNode name=&quot;dn2&quot; dataHost=&quot;test2&quot; database=&quot;lunch&quot; /&gt;</code></pre><!-- 物理数据库配置 --><pre><code>&lt;dataHost name=&quot;test1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot;  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&gt;    &lt;heartbeat&gt;select user();&lt;/heartbeat&gt;    &lt;writeHost host=&quot;hostM1&quot; url=&quot;192.168.0.2:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt;      &lt;/writeHost&gt;&lt;/dataHost&gt;&lt;dataHost name=&quot;test2&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;0&quot; writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&gt;    &lt;heartbeat&gt;select user();&lt;/heartbeat&gt;    &lt;writeHost host=&quot;hostS1&quot; url=&quot;192.168.0.3:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt;      &lt;/writeHost&gt;&lt;/dataHost&gt;</code></pre><p></p></mycat:schema><br>我在192.168.0.2、192.168.0.3均有数据库lunch。<br>lunchmenu、restaurant、userlunch、users这些表都只写入节点dn1，也就是192.168.0.2这个服务，而dictionary写入了dn1、dn2两个节点，也就是192.168.0.2、192.168.0.3这两台服务器。分片的规则为：mod-long。<br>主要关注rule属性，rule属性的内容来源于rule.xml这个文件，Mycat支持10种分表分库的规则，基本能满足你所需要的要求，这个必须赞一个，其他数据库中间件好像都没有这么多。<br>table中的rule属性对应的就是rule.xml文件中tableRule的name,具体有哪些分表和分库的实现，建议还是看下文档。我这里选择的mod-long就是将数据平均拆分。因为我后端是两台物理库，所以rule.xml中mod-long对应的function count为2，见下面部分代码：<p></p><tablerule name="mod-long"><br>        <rule><br>            <columns>id</columns><br>            <algorithm>mod-long</algorithm><br>        </rule><br>    </tablerule><p><function name="mod-long" class="io.mycat.route.function.PartitionByMod"><br>        <!-- how many data nodes --><br>        <property name="count">2</property><br>    </function><br>数据库读写分离</p><p>配置如下：</p><p>&lt;?xml version=”1.0”?&gt;<br>&lt;!DOCTYPE mycat:schema SYSTEM “schema.dtd”&gt;</p><mycat:schema xmlns:mycat="http://io.mycat/"><!-- 数据库配置，与server.xml中的数据库对应 --><pre><code>&lt;schema name=&quot;lunch&quot; checkSQLschema=&quot;false&quot; sqlMaxLimit=&quot;100&quot;&gt;    &lt;table name=&quot;lunchmenu&quot; dataNode=&quot;dn1&quot;  /&gt;    &lt;table name=&quot;restaurant&quot; dataNode=&quot;dn1&quot;  /&gt;    &lt;table name=&quot;userlunch&quot; dataNode=&quot;dn1&quot;  /&gt;    &lt;table name=&quot;users&quot; dataNode=&quot;dn1&quot;  /&gt;    &lt;table name=&quot;dictionary&quot; primaryKey=&quot;id&quot; autoIncrement=&quot;true&quot; dataNode=&quot;dn1&quot;  /&gt;&lt;/schema&gt;</code></pre><!-- 分片配置 --><pre><code>&lt;dataNode name=&quot;dn1&quot; dataHost=&quot;test1&quot; database=&quot;lunch&quot; /&gt;</code></pre><!-- 物理数据库配置 --><pre><code>&lt;dataHost name=&quot;test1&quot; maxCon=&quot;1000&quot; minCon=&quot;10&quot; balance=&quot;1&quot;  writeType=&quot;0&quot; dbType=&quot;mysql&quot; dbDriver=&quot;native&quot;&gt;    &lt;heartbeat&gt;select user();&lt;/heartbeat&gt;    &lt;writeHost host=&quot;hostM1&quot; url=&quot;192.168.0.2:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt;      &lt;readHost host=&quot;hostM1&quot; url=&quot;192.168.0.3:3306&quot; user=&quot;root&quot; password=&quot;123456&quot;&gt;       &lt;/readHost&gt;    &lt;/writeHost&gt;&lt;/dataHost&gt;</code></pre><p></p></mycat:schema><br>这样的配置与前一个示例配置改动如下：<br>删除了table分配的规则,以及datanode只有一个<br>datahost也只有一台，但是writehost总添加了readhost,balance改为1，表示读写分离。<br>以上配置达到的效果就是102.168.0.2为主库，192.168.0.3为从库。<p></p><p>注意：Mycat主从分离只是在读的时候做了处理，写入数据的时候，只会写入到writehost，需要通过mycat的主从复制将数据复制到readhost，这个问题当时候我纠结了好久，数据写入writehost后，readhost一直没有数据，以为是自己配置的问题，后面才发现Mycat就没有实现主从复制的功能，毕竟数据库本身自带的这个功能才是最高效稳定的。</p><p>至于其他的场景，如同时主从和分表分库也是支持的了，只要了解这个实现以后再去修改配置，都是可以实现的。而热备及故障专业官方推荐使用haproxy配合一起使用，大家可以试试。<br>使用</p><p>Mycat的启动也很简单，启动命令在Bin目录：</p><p>##启动<br>mycat start</p><p>##停止<br>mycat stop</p><p>##重启<br>mycat restart<br>如果在启动时发现异常，在logs目录中查看日志。</p><p>wrapper.log 为程序启动的日志，启动时的问题看这个<br>mycat.log 为脚本执行时的日志，SQL脚本执行报错后的具体错误内容,查看这个文件。mycat.log是最新的错误日志，历史日志会根据时间生成目录保存。<br>mycat启动后，执行命令不成功，可能实际上配置有错误，导致后面的命令没有很好的执行。</p><p>Mycat带来的最大好处就是使用是完全不用修改原有代码的，在mycat通过命令启动后，你只需要将数据库连接切换到Mycat的地址就可以了。如下面就可以进行连接了：</p><p> mysql -h192.168.0.1 -P8806 -uroot -p123456<br>连接成功后可以执行sql脚本了。<br>所以，可以直接通过sql管理工具（如：navicat、datagrip）连接，执行脚本。我一直用datagrip来进行日常简单的管理，这个很方便。</p><p>Mycat还有一个管理的连接，端口号是9906.</p><p> mysql -h192.168.0.1 -P9906 -uroot -p123456<br>连接后可以根据管理命令查看Mycat的运行情况，当然，喜欢UI管理方式的人，可以安装一个Mycat-Web来进行管理，有兴趣自行搜索。</p><p>简而言之，开发中使用Mycat和直接使用Mysql机会没有差别。</p><p>常见问题</p><p>使用Mycat后总会遇到一些坑，我将自己遇到的一些问题在这里列一下，希望能与大家有共鸣：</p><p>Mycat是不是配置以后，就能完全解决分表分库和读写分离问题？<br>Mycat配合数据库本身的复制功能，可以解决读写分离的问题，但是针对分表分库的问题，不是完美的解决。或者说，至今为止，业界没有完美的解决方案。<br>分表分库写入能完美解决，但是，不能完美解决主要是联表查询的问题，Mycat支持两个表联表的查询，多余两个表的查询不支持。 其实，很多数据库中间件关于分表分库后查询的问题，都是需要自己实现的，而且节本都不支持联表查询，Mycat已经算做地非常先进了。<br>分表分库的后联表查询问题，大家通过合理数据库设计来避免。</p><p>Mycat支持哪些数据库，其他平台如 .net、PHP能用吗？<br>官方说了，支持的数据库包括MySQL、SQL Server、Oracle、DB2、PostgreSQL 等主流数据库，很赞。<br>尽量用Mysql,我试过SQL Server，会有些小问题，因为部分语法有点差异。</p><p>Mycat 非JAVA平台如 .net、PHP能用吗？<br>可以用。这一点MyCat做的也很棒。</p><p>参考</p><p>《Mycat权威指南》： <a href="http://www.mycat.io/document/Mycat_V1.6.0.pdf" target="_blank" rel="noopener">http://www.mycat.io/document/Mycat_V1.6.0.pdf</a><br>官网 ：<a href="http://www.mycat.io/" target="_blank" rel="noopener">http://www.mycat.io/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装&lt;/p&gt;
&lt;p&gt;Mycat官网：&lt;a href=&quot;http://www.mycat.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.mycat.io/&lt;/a&gt;&lt;br&gt;可以了解下Mycat的背景和应用情况，这样使用起来比较有信
      
    
    </summary>
    
      <category term="软件" scheme="https://shenyihan.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="软件" scheme="https://shenyihan.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>2018读书</title>
    <link href="https://shenyihan.github.io/2018/02/02/2018%E8%AF%BB%E4%B9%A6/"/>
    <id>https://shenyihan.github.io/2018/02/02/2018读书/</id>
    <published>2018-02-02T07:17:44.000Z</published>
    <updated>2018-02-02T07:18:43.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="金字塔原理"><a href="#金字塔原理" class="headerlink" title="金字塔原理"></a>金字塔原理</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;金字塔原理&quot;&gt;&lt;a href=&quot;#金字塔原理&quot; class=&quot;headerlink&quot; title=&quot;金字塔原理&quot;&gt;&lt;/a&gt;金字塔原理&lt;/h1&gt;
      
    
    </summary>
    
      <category term="读书" scheme="https://shenyihan.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读书" scheme="https://shenyihan.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>微信机器人</title>
    <link href="https://shenyihan.github.io/2018/01/15/%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>https://shenyihan.github.io/2018/01/15/微信机器人/</id>
    <published>2018-01-15T07:51:40.000Z</published>
    <updated>2018-01-23T03:03:27.052Z</updated>
    
    <content type="html"><![CDATA[<p>   最近在做的项目，需要申请一些微信号进行营销工作，人工做费时费力。恰巧发现了wxpy可以实现让微信自动接收、处理消息然后进行回复的一系列功能。<br>   现总结记录如下：</p><h1 id="安装python，需要版本3以上"><a href="#安装python，需要版本3以上" class="headerlink" title="安装python，需要版本3以上"></a>安装python，需要版本3以上</h1><pre><code>yum install epel-releaseyum install python34</code></pre><h1 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h1><pre><code>yum install python34-setuptoolseasy_install-3.4 pip</code></pre><h1 id="安装wxpy"><a href="#安装wxpy" class="headerlink" title="安装wxpy"></a>安装wxpy</h1><pre><code>pip3 install -i https://pypi.doubanio.com/simple/ -U wxpy</code></pre><h1 id="使用python3，pycharm根据wxpy官网操作即可。"><a href="#使用python3，pycharm根据wxpy官网操作即可。" class="headerlink" title="使用python3，pycharm根据wxpy官网操作即可。"></a>使用python3，pycharm根据wxpy官网操作即可。</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;   最近在做的项目，需要申请一些微信号进行营销工作，人工做费时费力。恰巧发现了wxpy可以实现让微信自动接收、处理消息然后进行回复的一系列功能。&lt;br&gt;   现总结记录如下：&lt;/p&gt;
&lt;h1 id=&quot;安装python，需要版本3以上&quot;&gt;&lt;a href=&quot;#安装python
      
    
    </summary>
    
      <category term="软件" scheme="https://shenyihan.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="微信" scheme="https://shenyihan.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>波浪理论</title>
    <link href="https://shenyihan.github.io/2018/01/10/%E6%B3%A2%E6%B5%AA%E7%90%86%E8%AE%BA/"/>
    <id>https://shenyihan.github.io/2018/01/10/波浪理论/</id>
    <published>2018-01-10T06:08:48.000Z</published>
    <updated>2018-01-11T06:27:27.138Z</updated>
    
    <content type="html"><![CDATA[<p>一、记录学习地址：<br>    <a href="http://www.360doc.com/content/11/1106/09/5096590_162169092.shtml" target="_blank" rel="noopener">http://www.360doc.com/content/11/1106/09/5096590_162169092.shtml</a><br>二、记录缠论中枢理解：<br>    <img src="/img/缠论中枢.jpg" alt="logo"></p>]]></content>
    
    <summary type="html">
    
      波浪理论知识，学习
    
    </summary>
    
      <category term="金融" scheme="https://shenyihan.github.io/categories/%E9%87%91%E8%9E%8D/"/>
    
    
      <category term="理论" scheme="https://shenyihan.github.io/tags/%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>理论剖析</title>
    <link href="https://shenyihan.github.io/2018/01/01/%E7%90%86%E8%AE%BA%E5%89%96%E6%9E%90/"/>
    <id>https://shenyihan.github.io/2018/01/01/理论剖析/</id>
    <published>2018-01-01T01:56:16.000Z</published>
    <updated>2018-02-27T02:10:38.060Z</updated>
    
    <content type="html"><![CDATA[<p>总结一些著名理论的适用场景</p><h1 id="江恩理论"><a href="#江恩理论" class="headerlink" title="江恩理论"></a>江恩理论</h1><h2 id="关注两种时间周期：对等周期和对等循环周期"><a href="#关注两种时间周期：对等周期和对等循环周期" class="headerlink" title="关注两种时间周期：对等周期和对等循环周期"></a>关注两种时间周期：对等周期和对等循环周期</h2><pre><code>对等周期：下跌和上涨时间（所用交易日）相同对等循环周期：选定一组高低点，在这组高低点的区间内又有很多的高低点，区间内第一个高低点距离区间左临界位交易日个数为8T，则区间右临界位+8即为变盘点（顶或底）；</code></pre><h1 id="龙虎榜的重要性"><a href="#龙虎榜的重要性" class="headerlink" title="龙虎榜的重要性"></a>龙虎榜的重要性</h1><h2 id="例如说佛山普澜二路证券营业部"><a href="#例如说佛山普澜二路证券营业部" class="headerlink" title="例如说佛山普澜二路证券营业部"></a>例如说佛山普澜二路证券营业部</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;总结一些著名理论的适用场景&lt;/p&gt;
&lt;h1 id=&quot;江恩理论&quot;&gt;&lt;a href=&quot;#江恩理论&quot; class=&quot;headerlink&quot; title=&quot;江恩理论&quot;&gt;&lt;/a&gt;江恩理论&lt;/h1&gt;&lt;h2 id=&quot;关注两种时间周期：对等周期和对等循环周期&quot;&gt;&lt;a href=&quot;#关注两种
      
    
    </summary>
    
      <category term="金融" scheme="https://shenyihan.github.io/categories/%E9%87%91%E8%9E%8D/"/>
    
    
      <category term="股票操作" scheme="https://shenyihan.github.io/tags/%E8%82%A1%E7%A5%A8%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>短线操作</title>
    <link href="https://shenyihan.github.io/2018/01/01/%E7%9F%AD%E7%BA%BF%E6%93%8D%E4%BD%9C/"/>
    <id>https://shenyihan.github.io/2018/01/01/短线操作/</id>
    <published>2018-01-01T01:56:16.000Z</published>
    <updated>2018-02-01T08:44:27.575Z</updated>
    
    <content type="html"><![CDATA[<pre><code>此篇博文用于记录本人2018所有短线操作，操作标的选取采用自创数据指标加通达信软件预警提示。暂称这个指标为涨峰回吐，根据股票历史数据回测年化收益率能达到50%，有成功当然也会有失败，探索阶段，努力试错。20180111，买入：002208合肥城建 成交价：10:30，20180112，卖出-----------------------：10.69. 盈利58520180115，买入：002131利欧股份 成交价：2.81，20180115，买入：300465高伟达   成交价：9.96，20180116，卖出：300465高伟达   成交价：10.27，盈利43720180122, 卖出：002131利欧股份 成交价：2.74，亏损52120180124，买入：600992贵绳股份 成交价：11.45，20180125，卖出：600992贵绳股份 成交价：11.55，盈利12020180131，买入：002109兴化股份 成交价：7.24，20180131，买入：002106莱宝高科 成交价：9.81，20180201，卖出：002109兴化股份 成交价：7.50。盈利493仅供参考，据此操作盈亏自负。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;此篇博文用于记录本人2018所有短线操作，操作标的选取采用自创数据指标加通达信软件预警提示。
暂称这个指标为涨峰回吐，根据股票历史数据回测年化收益率能达到50%，有成功当然也会有失败，探索阶段，努力试错。
20180111，买入：002208合肥城建 成交价
      
    
    </summary>
    
      <category term="金融" scheme="https://shenyihan.github.io/categories/%E9%87%91%E8%9E%8D/"/>
    
    
      <category term="股票操作" scheme="https://shenyihan.github.io/tags/%E8%82%A1%E7%A5%A8%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper安装使用</title>
    <link href="https://shenyihan.github.io/2017/12/30/PageName/"/>
    <id>https://shenyihan.github.io/2017/12/30/PageName/</id>
    <published>2017-12-30T05:38:58.000Z</published>
    <updated>2018-01-23T03:05:01.783Z</updated>
    
    <content type="html"><![CDATA[<p>Zookeeper是一个协调服务，可以用它来作为配置维护、名字服务、分布式部署；<br>下面，我来分享一下在Linux下安装Zookeeper的整个步骤，让大家少走弯路。</p><h1 id="Zookeeper下载"><a href="#Zookeeper下载" class="headerlink" title="Zookeeper下载"></a>Zookeeper下载</h1><pre><code>wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.9/zookeeper-3.4.9.tar.gz[plain] view plain copy  print?[root@localhost 下载]# wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.3.6/zookeeper-3.3.6.tar.gz  --2016-01-15 23:15:57--  http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.3.6/zookeeper-3.3.6.tar.gz  正在解析主机 mirror.bit.edu.cn (mirror.bit.edu.cn)... 114.247.56.117  正在连接 mirror.bit.edu.cn (mirror.bit.edu.cn)|114.247.56.117|:80... 已连接。  已发出 HTTP 请求，正在等待回应... 200 OK  长度：11833706 (11M) [application/octet-stream]  正在保存至: “zookeeper-3.3.6.tar.gz”  100%[======================================================================================================================================================================================&gt;] 11,833,706   171KB/s 用时 68s      2016-01-15 23:17:07 (170 KB/s) - 已保存 “zookeeper-3.3.6.tar.gz” [11833706/11833706])  </code></pre><h1 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h1><pre><code>tar -zxvf /home/mgr/zookeeper-3.4.9.tar.gz[html] view plain copy  print?[root@localhost deploy]# tar -zxvf /home/lk/下载/zookeeper-3.3.6.tar.gz   解压完之后，会在deploy文件夹下面得到一个zookeeper-3.3.6的文件夹</code></pre><h1 id="进入到conf目录"><a href="#进入到conf目录" class="headerlink" title="进入到conf目录"></a>进入到conf目录</h1><pre><code>[plain] view plain copy  print?[root@localhost deploy]# cd /opt/deploy/zookeeper-3.3.6/conf  </code></pre><h1 id="拷贝zoo-samle-cfg为zoo-cfg"><a href="#拷贝zoo-samle-cfg为zoo-cfg" class="headerlink" title="拷贝zoo_samle.cfg为zoo.cfg"></a>拷贝zoo_samle.cfg为zoo.cfg</h1><pre><code>[plain] view plain copy  print?[root@localhost conf]# cp zoo_sample.cfg zoo.cfg  </code></pre><h1 id="编辑zoo-cfg文件"><a href="#编辑zoo-cfg文件" class="headerlink" title="编辑zoo.cfg文件"></a>编辑zoo.cfg文件</h1><pre><code>[plain] view plain copy  print?[root@localhost conf]# vi zoo.cfg   修改为：[html] view plain copy  print?# The number of milliseconds of each tick  tickTime=2000  # The number of ticks that the initial  # synchronization phase can take  initLimit=10  # The number of ticks that can pass between  # sending a request and getting an acknowledgement  syncLimit=5  # the directory where the snapshot is stored.  dataDir=/usr/zookeeper  dataLogDir=/usr/zookeeper/log  # the port at which the clients will connect  clientPort=2181  server.1=192.168.32.129:2888:3888  </code></pre><h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><pre><code>export ZOOKEEPER_INSTALL=/home/mgr/zookeeper-3.4.9export PATH=$PATH:$ZOOKEEPER_INSTALL/bin[plain] view plain copy  print?[root@localhost conf]# export ZOOKEEPER_INSTALL=/opt/deploy/zookeeper-3.3.6  [root@localhost conf]# export PATH=$PATH:$ZOOKEEPER_INSTALL/bin  </code></pre><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><pre><code>[plain] view plain copy  print?[root@localhost bin]# ./zkServer.sh start  JMX enabled by default  Using config: /opt/deploy/zookeeper-3.3.6/bin/../conf/zoo.cfg  Starting zookeeper ... STARTED  [root@localhost bin]#   </code></pre><h1 id="测试zookeeper"><a href="#测试zookeeper" class="headerlink" title="测试zookeeper"></a>测试zookeeper</h1><pre><code>[plain] view plain copy  print?[root@localhost bin]# ./zkCli.sh -server 192.168.32.129:2181  如果是本地连接，那么不需要 -server 192.168.32.129:2181,默认是本地注意：如果出现拒绝连接，请检查如下：1、防火墙是否关闭  systemctl stop firewalld2、需要将192.168.32.129 映射到本地 /etc/hosts文件中，否则无法连接</code></pre><h1 id="集群配置："><a href="#集群配置：" class="headerlink" title="集群配置："></a>集群配置：</h1><pre><code>在一个zookeeper集群中，只要半数以上的机器正常工作，整个集群即可处于正常工作的状态。例如：3台机器组成的集群，只要int(3/2)+1=2台机器正常工作即可。也就是说允许3台中的1台机器宕机    1、设置vi  /etc/hosts加    172.16.10.107 zookeeper-01    172.16.10.164 zookeeper-02    172.16.10.166 zookeeper-03    2、配置zoo.cfg 增加    dataDir=/home/mgr/zookeeper-3.4.9/data    dataLogDir=/home/mgr/zookeeper-3.4.9/log    server.1=zookeeper-01:2888:3888    server.2=zookeeper-02:2888:3888    server.3=zookeeper-03:2888:3888    3、在data下新建myid 内容分别为1/2/3    4、./zkServer.sh restart(重启)；./zkServer.sh status(查看状态)；./zkServer.sh stop(关闭)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Zookeeper是一个协调服务，可以用它来作为配置维护、名字服务、分布式部署；&lt;br&gt;下面，我来分享一下在Linux下安装Zookeeper的整个步骤，让大家少走弯路。&lt;/p&gt;
&lt;h1 id=&quot;Zookeeper下载&quot;&gt;&lt;a href=&quot;#Zookeeper下载&quot; cla
      
    
    </summary>
    
      <category term="软件" scheme="https://shenyihan.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="软件安装" scheme="https://shenyihan.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
</feed>
